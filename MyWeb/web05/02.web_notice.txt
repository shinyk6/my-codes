=========== JavaScript 실습 예제 (10개) ===========
js01_variables.html : 변수 선언 (var, let, const)
js02_condition.html : 조건문 (if, else if, else)
js03_loop.html : 반복문 (for)
js04_function.html : 함수 정의 및 호출
js05_event_click.html : 클릭 이벤트 처리
js06_dom_change.html : DOM 요소 변경
js07_array_loop.html : 배열 반복 (forEach)
js08_object.html : 객체 생성 및 출력
js09_fetch_basic.html : fetch()로 외부 API 호출
js10_async_await.html : async/await 기반 비동기 통신

=========== jQuery 실습 예제 (10개) ===========
jq01_selector.html : 기본 선택자 및 스타일 변경
jq02_click_event.html : 클릭 이벤트 처리
jq03_hover_effect.html : 마우스 hover 이벤트 처리
jq04_input_value.html : 입력값 읽기 및 출력
jq05_append_remove.html : 항목 추가 및 삭제
jq06_toggle_class.html : 클래스 토글로 효과 변경
jq07_ajax_get.html : 외부 API 데이터를 가져오는 AJAX GET
jq08_fade_toggle.html : fade 효과로 요소 토글
jq09_chaining.html : jQuery 메서드 체이닝 실습
jq10_ajax_post_mock.html : POST 방식으로 데이터 전송 (모의 API)


=========== React 실습 예제 (10개) ===========
1) 컴포넌트 정의 및 사용: React의 가장 기본적인 구성 요소인 컴포넌트를 만들고 사용하는 방법
   (react01_Hello.jsx, react02_Props.jsx, react10_ParentChild.jsx)
2) Props를 통한 데이터 전달: 컴포넌트 간에 데이터를 전달하는 방법 (react02_Props.jsx, react10_ParentChild.jsx)
3) State 관리: 컴포넌트 내부에서 동적인 데이터를 관리하고 화면을 업데이트하는 방법 (react03_UseState.jsx, react04_InputBinding.jsx, react09_FormSubmit.jsx)
4) 이벤트 핸들링: 사용자의 입력이나 동작에 반응하는 방법 (react04_InputBinding.jsx, react09_FormSubmit.jsx)
5)조건부 렌더링: 특정 조건에 따라 다른 UI를 보여주는 방법. (react05_ConditionalRender.jsx)
6) 리스트 렌더링: 배열의 데이터를 반복하여 화면에 표시하는 방법. (react06_ListRender.jsx, react08_FetchData.jsx)
7) Effect Hook: 컴포넌트가 렌더링된 후에 특정 작업을 수행하는 방법. (react07_UseEffect.jsx, react08_FetchData.jsx)
8) 데이터 가져오기: 외부 API에서 데이터를 가져오는 방법. (react08_FetchData.jsx)
9) Form 처리: Form을 통해 사용자 입력을 받고 처리하는 방법 (react09_FormSubmit.jsx)

react01_Hello.jsx : 기본 출력 컴포넌트   
react02_Props.jsx : Props 전달 및 출력
react03_UseState.jsx : useState로 카운터 구현
react04_InputBinding.jsx : 입력 바인딩 및 상태 반영
react05_ConditionalRender.jsx : 조건부 렌더링
react06_ListRender.jsx : 리스트 반복 렌더링
react07_UseEffect.jsx : useEffect로 실시간 시계 구현
react08_FetchData.jsx : 외부 API 데이터 가져오기
react09_FormSubmit.jsx : 폼 입력 및 제출 처리
react10_ParentChild.jsx : 부모 → 자식 컴포넌트 데이터 전달

========================================================================
npm 패키지 이름 규칙
소문자만 허용 / _ - 사용 / 특수문자 사용 X / 길이제한 O / 예약어 X / 점(.), 공백 X
npx create-react-app test-ui  -> 패키지풀을 자동 설치


test-ui 프로젝트
1) 컴포넌트 (Componet) : UI를 작은 조각으로 나누는 단위 (함수, 클래스, 훅) - 모듈들
2) .jsx (JavaScriptXml) = js(HTML) - html을 주면 react가 자동으로 createElement
   const e = <h1>abc</h1>
   react.createElement(h1, null, abc)

3) props = 읽기 전용 : 컴포넌트에 값을 전달하는 방법을 객체를 통해 구현 (부모 컴포넌트가 자식 컴포넌트에게 정보 전달)
4) state = 컴포넌트 안에서 변경할 수 있는 값 / 변하는 값 

- useState
const [현재 상태값, 상태 변경함수] = useState(초기값);
const [state, setState] = useState(initialState)

ex) const [count, setCount] = uesState(0); //초기값 0
const handleCalc=()=>{
   setCount(count+1);
}


- useEffect : 사이드 이펙트 담당 -> 데이터 가져오기, Dom 직접 접근 조작, 타이머, 외부 리소스 제어
userEffect(setup, dependencies?)

  useEffect(() => {
        // 수행할 작업 (이 부분을 사이드 이펙트 라고 함)
        // DB연결
     return () => { 
        // 정리 할 코드
        // DB연결 해제
     };}, [dependencies])
  

- node.js 로 서버(7777)를 실행한 다음 react 클라이언트(3000)로 값을 리턴받자.
1) my-node-server 폴더를 생성한다.
2) 터미널에서 cd my-node-server 
3) my-node-server > npm init -y     (package.js파일이 생성됨)
4) npm install express - 모듈 설치 안되면, 모듈설치
5) 하위에 server.js 파일을 생성
6) node server.js -> 서버 실행


-- React11_Router.jsx
import { BrowserRouter, Routes, Route, Link } from "react-router-dom";
BrowserRouter : 전체 앱을 라우팅 가능하도록 감싸주는 최상위 컴포넌트
   단, App.js 에서 단 한번만 사용한다.
Routes : 여러 개의 Route를 포함하는 컨테이너 (BrowserRouter는 하나 이상의 Route를 가지고 있음.)
Route : 특정 경로 path에 도달했을 때 element를 보여준다.
Link : html의 <a>처럼 요청은 동일하지만 새로고침 없이 URL만 바꿔서 해당 컴포넌트를 렌더링한다.

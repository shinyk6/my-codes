Querydsl로 Emp-Dept 두 테이블을 사용하여 사원의 이름, 부서 이름을 출력해보자.
Querydsl이란? 
-다양한 DB플랫폼에 접근하여 SQL과 유사한 문법으로 쿼리를 작성하여 데이터 처리를 수행하는데 도움을 주는 프레임워크
-SQL형태가 아닌 자바 코드로 작성하여 데이터베이스 쿼리 작성을 쉽고 안전하게 만들어줌

Emp -> QEmp 변환 
Dept -> QDept 변환

//자바 코드 / 자동 완성 / 동적 쿼리 => 편함

1) emp, dept -> Q (Q로 만들면서 다양한 것들을 팩토리로 만듦) -> 나만의 my변수로 변환 
QEmp emp = QEmp.emp;
QDept dept = QDept.dept;

2) 쿼리문에 해당하는 메소드를 호출해서 실행 리턴
select ename, dname from emp join dept using(deptno); //using-별칭 안해도 됨
select e.ename, d.dname from emp e join dept d on(e.deptno=d.deptno); //on-별칭 써야됨

List(<Tuple>) res = queryFactory.select(emp.ename, dept.dname)
							  .from(emp
							  .join(emp.dept, dept) //@ManyToOne
							  .fetch();  //메모리에 있으면 다 지워라
							  
for(Tuple tuple : res){
	String name = tuple.get(emp.ename);
	String dname = tuple.get(dept.dname);
	System.out.println(ename + "\t" + dname)
}


(1,2,3,4,5) - 괄호로 나열하면 Tuple



[1] 개념
Querydsl :  Java 기반 타입 안전한 동적 쿼리 생성 라이브러리,
  SQL, JPQL과 달리 Java 문법으로 쿼리를 생성 (오타, 필드명 오류를 컴파일 타임에 확인 가능)

Spring Data JPA :JPA를 편리하게 사용할 수 있도록 제공되는 라이브러리
기본적인 CRUD, 쿼리 메서드(findByName, findByAgeGreaterThan)를 사용
복잡한 쿼리는 @Query 또는 Querydsl과 함께 사용 가능

[2]선언 사용방법
 Querydsl 설정은  Maven/Gradle에 Querydsl 라이브러리 추가하면  Q타입 생성
  mvn compile 또는 Gradle 빌드 시 자동 생성됨 (예: QScore, QCourse)
 
 ===============Querydsl   
 @Autowired
private JPAQueryFactory queryFactory;

QScore score = QScore.score;

List<Score> result = queryFactory
    .selectFrom(score)
    .where(score.studentName.eq("홍길동")
           .and(score.score.gt(80)))
    .fetch();
 
 =========================Query로 JPQL 또는 네이티브 SQL 직접 작성 가능
 public interface ScoreRepository extends JpaRepository<Score, Long> {
    @Query("SELECT s FROM Score s WHERE s.studentName = :name AND s.score > :score")
    List<Score> findByStudentNameAndScore(@Param("name") String name, @Param("score") int score);
}

[3] 주요 인터페이스 : https://javadoc.io/doc/com.querydsl/querydsl-jpa/latest/index.html
JpaRepository:Spring Data JPA의 기본 CRUD 및 페이징/정렬 기능을 제공하는 인터페이스

JPAQueryFactory:Querydsl의 쿼리 빌더 역할을 수행하는 클래스. selectFrom, where 등의 체이닝 메서드 제공

QuerydslPredicateExecutor:Querydsl의 Predicate를 인자로 받아 동적 쿼리를 바로 수행할 수 있게 해주는 인터페이스

QuerydslRepositorySupport: Querydsl과 JPA를 함께 사용할 때, JPAQueryFactory를 쉽게 사용하도록 도와주는 추상 클래스


[4] QuerydslRepositorySupport  사용방법 

Q) 사원 테이블 Emp에서 부서명과 나이를 조건으로 동적으로 사원을 검색해 보자.  
   조건  :  부서명 = 특정 부서명 & 나이 > 특정 나이 
   ex) "HR" 부서 & 나이 25세 이상인 사원들을  리턴받자.  
   
   
    1) 인터페이스 선언
    public interface EmpRepositoryCustom {
    List<Emp> searchByDepartmentAndAge(String department, int minAge);
    }
 
    2)QuerydslRepositorySupport 구현 클래스 
 
@Repository
public class EmpRepositoryImpl extends QuerydslRepositorySupport implements EmpRepositoryCustom {

    @Autowired
     private  JPAQueryFactory queryFactory;

    @Override
    public List<Emp> searchByDepartmentAndAge(String department, int minAge) {
        QEmp emp = QEmp.emp;

        return queryFactory
                .selectFrom(emp)
                .where(emp.department.eq(department)
                       .and(emp.age.gt(minAge)))
                .fetch();
    }
}
  3) Spring Data JPA의 JpaRepository와 연결
  public interface EmpRepository extends JpaRepository<Emp, Long>, EmpRepositoryCustom {
    // JpaRepository의 CRUD + EmpRepositoryCustom의 사용자 정의 메서드
}
  
==================================================================================================================
  SpringEL
  1) #{…} : 런타임 시에 객체 그래프를 쿼리에 적용할 때 사용   - 빈으로 등록되어있는 것만 사용
  	    	스프링 빈 참조 #{emp}, 빈 메소드 호출 #{emp.getDept()}, 빈 속성(필드) 접근 #{emp.ename}, 즉시 계산 #{1+1} 
  	    	
  	    	case 1:
  	    	@value(#{emp.toSring() +/ '결과야'})
  			private String getConfig;
  			
  			case 2:
  			파일내용 myapp.name=내꺼야
  			
  			@value( ${my.app.name }       //설정파일 $		-> Property Placeholder property가 가지고 있는 키값, yamul등 
  			private String projectName;
  
  
  ?#{…}/?${…}.	-> jakarta 공식 문법이 아님:JPA 문법에서도 매개변수의 위치 지정,  선택적으로 사용함.
  										보통 MVC패턴 @Query에 적용됨
  										
  	* https://docs.spring.io/spring-data/jpa/reference/jpa/value-expressions.html _EvaluationContextProvider 
  	  Example 4. Expression Evaluation Examples : 루트객체, 속성, 함수, 별칭함수를 사용한 컨텍스트 확장 코드 확인 
  					
  
===============================================================================================================================================
  
  @SqlResultSetMapping , @NativeQuery(resultSetMapping = "…") -> 한 쌍
  => 실제 DB에서 사용하는 필드와 프로그램 entity(=db table), dto(=requests, response객체 원하는것만 만듦. 혹, 리턴되는 속성이나 필드명, 객체 타입이 다를 경우 위 @을 사용) 
  
===============================================================================================================================================
  select * from emp; 		-> 순서대로 가져옴
  select empno, ename from emp; 
  sleec ename, empno, sal from emp;  순서 바꾸고 싶을 때 위 @ 사용
  
 ==============================================================================================================================================
@Entity
@NamedStoredProcedureQuery(name = "User.multiple_out_parameters", //프로시저 이름 (jpa에서 사용하는 이름)
 procedureName = "multiple_out_parameters", //실제 db에 존재하는 프로시저 이름
  parameters = {
  @StoredProcedureParameter(mode = ParameterMode.IN, name = "arg", type = Integer.class), //입력 파라미터
  @StoredProcedureParameter(mode = ParameterMode.REF_CURSOR, name = "some_cursor", type = void.class), //ref_cursor - 리턴커서
  @StoredProcedureParameter(mode = ParameterMode.OUT, name = "res", type = Integer.class) }) // 출력 파라미터
public class User {}
  
  저장 프로시저는 서비스 객체에서 EntityManager 객체로 호출해서 사용됨.
  
  
  
  <a th:href="@{/students/delete/{id}(id=${student.id})}"
  @뒤에는 주소가 들어감
  @{} : URL생성
  	/students/delete/{id} <- (id=${student.id}) : (id=${student.id}) 동적값을 {id}에 넣겠다.  
  												   id에 동적 프로퍼티 플레이스 홀더의 동적값을 저장한다.
  
  
  
  
  
  
  
  

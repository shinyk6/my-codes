- @JoinColumn의 주요 속성

name	: 	FK 컬럼명 (DB에 실제로 저장되는 컬럼명) _ 기본
referenced :  	FK가 참조할 대상 테이블의 컬럼명
unique	 :	FK 컬럼에 유니크 제약조건 추가
nullable	:	FK 컬럼의 NULL 허용 여부
insertable	:	INSERT SQL문 생성 시 FK 컬럼을 포함할지 여부 (가상 db를 사용할 경우)
updatable	:	UPDATE SQL문 생성 시 FK 컬럼을 포함할지 여부
columnDefinition	:	DDL 생성 시 FK 컬럼의 정의를 직접 작성 (varchar(255) 등)
table	:	FK 컬럼이 다른 테이블에 있는 경우에만 지정 (거의 사용하지 않음)

@Entity
public class Emp {

    @Id
    private int empno;
    private String ename;

    @ManyToOne
    @JoinColumn(
        name = "deptno",                   // FK 컬럼명
        referencedColumnName = "deptno",   // 참조하는 Dept 엔티티의 PK 컬럼명
        nullable = false,                  // NOT NULL
        unique = false,                    // 유니크하지 않음
        insertable = true,                 // INSERT문에 포함
        updatable = true,                  // UPDATE문에 포함
        columnDefinition = "BIGINT(10)"    // FK 컬럼 DDL 정의
    )
    private Dept dept;
}


Emp, Dept - 각각 개별 속성을 재정해보자.

ex01) FK로 컬럼명 name으로 지정하고 referencedColumnName 개별속성으로 지정하자.
@JoinColumn(name = "deptno", referencedColumnName = "deptno")

ex02) FK컬럼에 Not Null을 지정하겠다.
@JoinColumn(name = "deptno", nullable = false)

ex03) 1:1관계에서 FK를 유니크로 지정해보자.
@JoinColumn(name="deptno", unique=true)

ex04) FK를 읽기전용으로 사용해보자.
@JoinColumn(name="deptno", insertable=false, updatable =false)

ex05) DDL 생성 시 FK 컬럼의 타입/길이를 지정해보자. BIGINT(10)
@JoinColumn(name="deptno" columnDefinition = "BIGINT(10))


========================================================================

1) N:1 (@ManyToOne : 여러 사원이 하나의 부서에 소속)
여러 Emp가 하나의 Dept를 가진다.
class Emp{
	@ManyToOne
	@JoinColumn(
		 name = "deptno",                   // FK 컬럼명
	        referencedColumnName = "deptno",   // 참조하는 Dept 엔티티의 PK 컬럼명
	        nullable = false,                  // NOT NULL
	        unique = false,                    // 유니크하지 않음
	        insertable = true,                 // INSERT문에 포함
	        updatable = true,                  // UPDATE문에 포함
	        columnDefinition = "BIGINT(10)"    // FK 컬럼 DDL 정의
	)
	private Dept dept;	
}
class Dept{

	//일대 다 : 하나의 부서에 여러명의 Emp
	@OneToMany(mappedBy="dept") 	mappedBy : FK 컬럼은 반대쪽 엔티티(EMP)에만 존재하고 Dept테이블에는 FK컬럼없음!! (반대방향)
	private List<Emp> emps;
}


2) 1:1 (@OneToOne : 사원 하나에 상세정보 하나)
class Emp{
	@OneToOne
	@JoinColumn(
		 name = "emp_info_id",                  // FK 컬럼명
	        referencedColumnName = "id",   // empInfo가 가지고 있는 PK컬럼
	        nullable = false                  // NOT NULL
	)
	private EmpInfo empInfo;
}
class EmpInfo{

	//일대일 양방향
	@OneToOne(mappedBy="empInfo")
	private Emp emp;
}


3) n:m	(@ManyToMany + @JoinTable : 학생과 강의 관계 -> 학생은 여러개의 강의를 듣고, 강의는 여러 학생이 들음)

class Student{
	
	@ManyToMany
	@JoinTable(	//다대다 관계는 중간 테이블이 있을거라 가정해서 JoinTable
		name = "student_course",					//중간 테이블명
		joinColumns = @JoinColumn("student_id")		//Student의 FK
		inverseJoinColumns = @JoinColumn("course_id") //Course의 FK
	)
	private List<Course> courses;
}
class Course{

	@Id
	private int course_id;
	
	@ManyToMany(mappedBy="courses")
	private List<Student> students;
}

================================================================================================
<<관계 정리>>
			 주 테이블  							주 테이블에 FK컬럼 존재				중간 테이블 필요
 N : 1	->	@ManyToOne 									O							X
 1 : N	->	@OneToMany(mappedBy)						X							X
 1 : 1	->	@OneToOne + @JoinColumn/mappedBy		  O, X(주테이블에 O, 종테이블에X)		X
 N : M	->	@ManyToMany	+ @JoinTable					X							O

exam)
 1:N (Dept-Emp) : N쪽(Emp) FK @JoinColum
 1:1	FK는 반트시 한쪽 테이블에 만들고, 반대쪽은 mappedBy
 N:M	반드시 중간 테이블 @JoinTable 생성

================================================================================================
@NoRepositoryBean -> 인터페이스를 직접 빈으로 등록하지 않도록 설정   https://docs.spring.io/spring-data/jpa/reference/repositories/definition.html
				  -> 선조 인터페이스가 가지는 공통 메소드만 정의하고 싶을 때
				  -> 빈으로 만들지 않고 코드를 재사용하고 싶을 때


ex) 공통 메소드를 재정의하여 내것처럼 사용

@NoRepositoryBean	//빈 등록 안한다.
interface MyBaseRepository<T, ID> extends Repository<T, ID> {

	//공통 메소드를 다른 형태로 변경(커스텀화) 했다. 
  Optional<T> findById(ID id);  //값이 없을 때 npe 방지

  <S extends T> S save(S entity);  //T타입의 모든 하위타입 저장할 수 있다.
}

interface UserRepository extends MyBaseRepository<User, Long> { // 커스텀한 MyBaseRepository을 사용 -> MyBaseRepository의 재정의 메소드+원래 있던 메소드 내것처럼 사용 가능
  User findByEmailAddress(EmailAddress emailAddress);
}

===============================================================================================================
Persisting Entities : 엔티티를 계속 유지하겠다. 자바 객체의 엔티티 상태를 데이터베이스에 저장하는 것
EntityManager : 엔티티 관리, 캐시 관리, DB 직접저장 등 (Entity생명주기를 가지고 있음)

@Transient : 관리 받지 않겠다. (EntityManger가 관리 x) - 휘발성
@PostPersist : 계속 메모리 가지고 있다가 DB저장하겠다. 

	=> 사용 방법  EntityManager.persist() -> EntityManager.find() 또는 jpa의 CRUD 메소드로 작업
		-> 커밋 또는 flush() 하게 되면 DB와 동기화가 된다.  (그냥 save하면 메모리에 머무르고, savEndFlush를 하면 바로 DB동기화)

===============================================================================================================

https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html

	==SpEL (Spring Expression Language) 17,18,19 -> #{...} 동적으로 쿼리의 파라미터나 컨텍스트 값을 지정함.

case 1 : 메소드 매개변수를 사용하는 방법 SpEL
@Query("select u from User u where u.firstname = ?1 and u.firstname=?#{[0]} and u.emailAddress = ?#{principal.emailAddress}")
List<User> findByFirstnameAndCurrentUserWithCustomQuery(String firstname);

-> ?1은 메소드의 첫번째 매개변수를 가리킴(firstname)
-> ?#{[0]} 는 매개변수 중 0번째 인덱스에 있는 매개변수를 가리킴(firstname)
 
case 2 : 메소드 파라미터를 사용 SpEL
@Query("select u from User u where u.lastname like %:#{[0]}% and u.lastname like %:lastname%")  //Param의 0번째 
List<User> findByLastnameWithSpelExpression(@Param("lastname") String lastname);

case 3 : 메소드 매개변수를 사용하는 방법 SpEL -> 첫번째 파라미터를 SqL 와일드 카드를 이스케이프로 처리하겠다.
@Query("select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}")
List<User> findContainingEscaped(String namePart);


@Modifying
@Query("update User u set u.firstname = ?1 where u.lastname = ?2")
int setFixedFirstnameFor(String firstname, String lastname);


==> 
@Modifying
@Query("update User u set u.firstname = #{[0]} where u.lastname = #{[1]}")
int setFixedFirstnameFor(String firstname, String lastname);


Query Hints
public interface UserRepository extends Repository<User, Long> {  -> hibernate에 힌트를 주는 것(readOnly할지, count쓸지 말지 등) / 캐시의 유무

  @QueryHints(value = { @QueryHint(name = "name", value = "value")},  -> value=value로 주면 값으로 전달, value=true를 하게 되면 조회 결과가 readOnly가 된다.
              forCounting = false)  								   -> count쿼리 사용하지 않겠다.
  Page<User> findByLastname(String lastname, Pageable pageable);
}














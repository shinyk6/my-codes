<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx
						https://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
						
						
	<!-- 1. DataSource 설정 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/my_emp"/>
		<property name="username" value="uk60"/>
		<property name="password" value="thdbsWkd123"/>
	</bean>

    <!-- 2. JdbcTemplate 설정 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <!-- 3. 트랜잭션 매니저 설정 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 4. 트랜잭션 어노테이션 사용 대신 AOP 기반 tx 설정  전파수준과 격리 수준을 설정 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/> <!-- get으로 시작하는 메소드는 읽기전용 트랜잭션으로 설정 -->
            <tx:method name="insert*" propagation="REQUIRED"/> <!-- insert를 여러개 할 경우 그 중 하나가 롤백되면 전부 롤백 (디폴트값) -->
            <tx:method name="*" propagation="REQUIRED"/> 
        </tx:attributes>
    </tx:advice>

    <!-- 5. 트랜잭션 AOP 적용 -->
    <!-- https://docs.spring.io/spring-framework/reference/data-access/transaction/declarative/tx-decl-explained.html#page-title -->
    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(* com.mydb.core.EmpService.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
        
        
  <!--  <aop:aspect ref="logAspect">
            <aop:pointcut id="logPointcut" expression="execution(* com.mydb.core..*(..))" />
            <aop:before method="beforeLog" pointcut-ref="logPointcut" />
            <aop:after-returning method="afterLog" pointcut-ref="logPointcut" />
        </aop:aspect>  -->  <!-- aop가 트랜잭션으로 선언되어있을 때 이 코드를 같이 쓰면 충돌남 -> @Before, @After등은 어노테이션으로 처리 -->
    </aop:config>

    <!-- 6. EmpDao Bean 등록 --> <!-- dao는 jdbcTemplate를 가지고 있어야함 -->
    <bean id="empDao" class="com.mydb.core.EmpDao">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>

    <!-- 7. EmpService Bean 등록 --> <!-- service는 dao를 가지고 있어야함 -->
    <bean id="empService" class="com.mydb.core.EmpService">
        <constructor-arg ref="empDao"/>
    </bean>

    <!-- 8. Aspect Bean 등록 -->
    <bean id="logAspect" class="com.mydb.core.LogAspect"/>

    <!-- 9. AOP 적용 -->
    <aop:aspectj-autoproxy/>					


</beans>

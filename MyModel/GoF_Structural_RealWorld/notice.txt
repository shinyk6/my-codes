📘 프로젝트명: GoF_Structural_RealWorld

 목적: 구조 패턴 7가지(Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy) 예제

 패키지 구조 및 설명:
1. com.sec01.Adapter - 호환되지 않는 인터페이스를 기존 시스템에 맞춰주는 패턴
				- 기존 클래스의 인터페이스가 클라이언트가 기대하는 인터페이스와 맞지 않을 때.
				- 기존 코드를 수정하지 않고 새로운 인터페이스를 제공해야 할 때.
				- 서로 다른 인터페이스를 가진 여러 클래스를 함께 사용해야 할 때.
				 ex) java.util.Arrays.asList(T[]) -> 배열 T[]를 List<T>로 어댑터
				 
2. com.sec02.Bridge - 추상화와 구현을 분리하여 독립적으로 확장 가능하게 하는 패턴 = GUI

3. com.sec03.Composite - 부분-전체를 트리 구조로 표현하며 클라이언트가 일관되게 사용 가능
					   - 개별객체, 복합객체를 통해서 공통 인터페이스 구현
					   
4. com.sec04.Decorator - 기존 객체에 새로운 기능을 동적으로 추가할 수 있는 구조
	= java.io.FileInputStream() + 버퍼 기능

5. com.sec05.Facade - 복잡한 하위 시스템을 단순한 인터페이스로 감싸는 구조

6. com.sec06.Flyweight - 공통된 객체 상태를 공유해 메모리 사용을 줄이는 구조 = 문자열관리 클래스

7. com.sec07.Proxy - 객체 접근을 제어하거나 기능을 추가하는 대리 객체 사용 _JPA
				   - 실제 객체에 대한 참조를 가지고 요청을 전달하거나 가로채기(Interceptor)한 다음 특정 작업을 수행할 때 구현하는 패턴

 디렉토리 구조:
└── com/sec01/Adapter/...
└── com/sec02/Bridge/...
└── com/sec03/Composite/...
└── com/sec04/Decorator/...
└── com/sec05/Facade/...
└── com/sec06/Flyweight/...
└── com/sec07/Proxy/...

	<<Score클래스로 아래 패턴을 만들어 보자>> 
	
1. Adapter : 	인터페이스 호환성 맞춤	-> 다른 형식의 점수 시스템(OldScoreSystem)을
                  Score에 맞게 변환해주는 ScoreAdapter 생성
                  
                  
2. Bridge  :	구현과 추상 분리 
  ->ScoreDisplay 추상화와 Score 구현을 분리하여 WebScoreDisplay, ConsoleScoreDisplay 등에서 다른 출력 구현 가능
  
3. Composite: 계층 구조 처리	 
    -> Score를 과목 단위로 나누고(개별처리), CompositeScore를 통해 여러 과목을 합산 처리

4. Decorator:	기능 동적 추가	  
-> Score에  [WithRankScore], WithGradeScore 등을 추가하여 확장 (ex. 등급 부여, 코멘트 추가 등)

5. Facade:	복잡한 시스템 간단화	 -> ScoreService를 만들어 내부적으로 Score, Grade, [Rank] 등 객체를 종합적으로 관리

6. Flyweight:	메모리 절약 공유	
 ->수많은 학생이 같은 Score 객체(Kor, Eng, Math)를 공유하도록 SubjectFlyweightFactory에서 관리

7. Proxy:	대리 객체 -> 	점수를 실제로 계산하는 대신 ScoreProxy가 먼저 캐시된 결과를 제공하고, 없을 때만 실제 계산 수행

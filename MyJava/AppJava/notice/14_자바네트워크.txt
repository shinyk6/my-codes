───────────────────────────────────────────────
 Java 네트워크 
───────────────────────────────────────────────
[1] 자바 네트워크 개요
	URL	: 찾아가는 경로 [연결용] -> 접속 주소 -> 프로토콜 + 호스트 + 포트(socket) + 패스(context) + 쿼리(key+value)
	URI : 리소스를 식별하는 방식 [분석용] -> 리소스를 정의 하는 방식 -> 스키마 [scheme:]scheme-specific-part[#fragment]
			mailto:java-net@java.sun.com
			news:comp.lang.java
			urn:isbn:096139210x
	URL은 URI의 하위 개념이다. (URI -> URL 로 변환해서 사용된다.)


- 네트워크 프로그래밍이란?
  → 여러 컴퓨터가 연결되어 데이터를 주고받는 시스템을 설계 및 구현하는 기술

- 자바의 네트워크 API
  → java.net 패키지 기반
  → 고수준 스트림 + 멀티스레드로 손쉽게 구현 가능

- 주요 클래스
  Socket, ServerSocket, DatagramSocket, URLConnection 등

<<각 Executors 생성 메서드 : 스레드 풀 객체를 쉽게 생성할 수 있는 클래스 >>  

 1. newSingleThreadExecutor() 다중병렬. 단일일때도 씀(시간차이 별로 안남) / Thread.startVirtualThread() 단일
- 단일 스레드로 작업을 순차적으로 처리
- 스레드 안전을 확보해야 하는 작업에 적합
- 모든 작업이 하나의 스레드에서 실행되므로 {실행 순서}가 중요할 때 사용

ex) 
ExecutorService executor = Executors.newSingleThreadExecutor();
executor.submit(() -> System.out.println("작업 A"));
executor.shutdown();

--------------------------------------------------

2. newFixedThreadPool(int n) : cpu에서 바로 바운드

- 고정된 스레드 개수(n)를 가진 스레드 풀 생성
- n개의 작업까지 동시에 실행, 그 외 작업은 큐에서 대기
- 제한된 리소스를 사용하는 병렬 작업에 적합 (예: DB 연결 제한)

ex) 
ExecutorService executor = Executors.newFixedThreadPool(4);
for (int i = 0; i < 10; i++) {
    int taskId = i;
    executor.submit(() -> System.out.println("작업 #" + taskId));
}
executor.shutdown();

--------------------------------------------------

3. newCachedThreadPool()	: 필요할 때 무한 생성, 제거 

- 작업이 들어올 때마다 새로운 스레드 생성
- 일정 시간 미사용 스레드는 재활용
- 수명이 짧고 개수가 많은 작업 처리에 적합
- 스레드 수 제한이 없어 과도한 사용 시 성능 저하 가능

ex) 
ExecutorService executor = Executors.newCachedThreadPool();
for (int i = 0; i < 100; i++) {
    int taskId = i;
    executor.submit(() -> System.out.println("작업 #" + taskId));
}
executor.shutdown();

--------------------------------------------------

4. newScheduledThreadPool(int n) --- 많이 사용하지 않는다. Timer로 대체 됨

- 예약 또는 주기적인 작업 실행 가능
- n개의 스레드로 동시에 예약된 작업 수행
- 반복적인 작업 처리, 타이머 등 스케줄 기반 작업에 적합
schedule(Runnable command, long delay, TimeUnit unit)

ex) 
ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);
scheduler.schedule(() -> System.out.println("3초 후 실행"), 3, TimeUnit.SECONDS);
scheduler.scheduleAtFixedRate(() -> System.out.println("반복 실행"), 0, 1, TimeUnit.SECONDS);

--------------------------------------------------

5. newSingleThreadScheduledExecutor()

- 단일 스레드에서 예약 작업 실행
- 반복 작업이 반드시 순차적으로 실행되어야 할 때 사용
- 작은 타이머 기반 작업 또는 UI 이벤트 큐와 유사한 환경에서 적합

ex) 
ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
scheduler.schedule(() -> System.out.println("딱 한 번 2초 후 실행"), 2, TimeUnit.SECONDS);

--------------------------------------------------

6. newWorkStealingPool()	--- 많이 사용하지 않는다.

- ForkJoinPool 기반의 고성능 병렬 처리 풀
- 내부적으로 작업을 나누고, 남은 작업은 다른 스레드가 "훔쳐" 수행
- CPU 바운드 연산 또는 divide-and-conquer 방식에 적합

ex) 
ExecutorService executor = Executors.newWorkStealingPool();
for (int i = 0; i < 10; i++) {
    int taskId = i;
    executor.submit(() -> {
        try {
            Thread.sleep(500);
            System.out.println("작업 #" + taskId + " 완료");
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    });
}
executor.shutdown();

--------------------------------------------------

7. ** newVirtualThreadPerTaskExecutor() (JDK 21 이상)

- 가상 스레드를 작업마다 하나씩 생성하는 경량 Executor
- 수십만 개의 작업도 안정적으로 병렬 처리 가능 (병렬 작업에 굉장히 유리)
- 블로킹 작업, I/O 중심 구조에 매우 적합
- 구조적 동시성(Structured Concurrency)과 함께 사용 가능

ex) 
ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();
for (int i = 0; i < 1000; i++) {
    int taskId = i;
    executor.submit(() -> {
        try {
            Thread.sleep(100);
            System.out.println("작업 #" + taskId + " 완료");
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    });
}
executor.shutdown();
executor.awaitTermination(5, TimeUnit.SECONDS);

 



================>   어떤걸 사용해야 할까?
작업을 순서대로 하나씩 실행하고 싶을 때:	Executors.newSingleThreadExecutor()	 -순차 , 분담
동시에 일정 수의 작업만 처리하고 싶을 때 DB :	Executors.newFixedThreadPool(n) 
짧고 빠른 작업이 많은데 유동적으로 처리하고 싶을 때 :	Executors.newCachedThreadPool()	
작업을 일정 시간 간격으로 반복 실행하고 싶을 때:	Executors.newScheduledThreadPool(n)	
예약 작업을 단 하나의 스레드에서 순서대로 실행해야 할 때	: Executors.newSingleThreadScheduledExecutor()
	
CPU 코어 수에 따라 병렬 분할 처리하고 싶을 때:	Executors.newWorkStealingPool()	
수십만 개의 작업을 동시에 안전하게 처리하고 싶을 때 (I/O 중심):	Executors.newVirtualThreadPerTaskExecutor() ***
가상/플랫폼 : (클라우드,naver box등..) newThreadPerTaskExecutor(ThreadFactory threadFactory) ***
───────────────────────────────────────────────

데이터 단방향/양방향 , 블로킹 유무
		
		
			서버객체							   클라이언트객체
블로킹 - ServerSocket(port)					Socket(ip, port)
	   Socket accept()						getOutputStream()
	   getInputStream()						getInputStream
	   getOutputStream()					close()
	   close() - 연결객체 끊음
	   
	   양쪽이 Socket으로 connected를 했을 때 stream 통로가 생기고,
	   Socket.getInputStream/OutputStream 등을 사용 가능

UDP는 패킷을 주고 받음 - DataGramSocket을 사용

[2] TCP 통신 구조

- Server 흐름
  1. ServerSocket 생성
  2. accept()로 클라이언트 연결 수락
  3. Socket 객체를 통해 입출력 스트림 확보
  4. 클라이언트와 데이터 송수신

- Client 흐름
  1. Socket 객체 생성
  2. 서버 주소 및 포트 입력
  3. 출력/입력 스트림 사용

- 주요 클래스: InputStream, OutputStream, BufferedReader, PrintWriter

───────────────────────────────────────────────

[3] 멀티스레드 서버 설계

- 문제: 단일 스레드 서버는 동시에 하나만 처리 가능 → 병목 발생

- 해결책: 클라이언트 요청마다 새로운 스레드를 생성하여 독립 처리

- 구조 예시:
  while (true) {
      Socket client = server.accept();
      new Thread(() -> handleClient(client)).start();
  }

- 활용 예: Echo 서버, 채팅 서버

───────────────────────────────────────────────

[4] 가상 스레드 (Virtual Thread)

- JDK 21에서 추가된 경량 스레드 기능
- 기존 OS 스레드 대비 메모리, 컨텍스트 스위칭 비용 매우 낮음
- `Thread.ofVirtual().start(...)` 또는 `Executors.newVirtualThreadPerTaskExecutor()` 사용

- 장점:
   수천~수십만 개 스레드 생성 가능 ,   블로킹 I/O 안전 , 스케일 아웃 구조에 적합

- 실습 예:
  VirtualThread 기반 다중 클라이언트 서버, 채팅방, 파일 서버

───────────────────────────────────────────────

[5] UDP 통신 구조

- TCP vs UDP
  TCP: 연결 기반, 신뢰성 있음  
  UDP: 비연결, 빠르지만 데이터 유실 가능

- 사용 클래스
  - DatagramSocket
  - DatagramPacket

- 예시 코드:
  DatagramSocket socket = new DatagramSocket(5000);
  DatagramPacket packet = new DatagramPacket(buf, buf.length);
  socket.receive(packet);

───────────────────────────────────────────────

[6] 실전 적용 예시 및 미니 프로젝트 아이디어

1. 실시간 채팅 서버
2. JavaFX + Socket 메신저
3. 채팅방 입퇴장 로그 기록 시스템
4. 대용량 가상 스레드 기반 메시지 처리기
5. 파일 서버 (업로드/다운로드)
6. 퀴즈 서버 – 클라이언트마다 문제 출제 및 채점

───────────────────────────────────────────────

[7] 모니터링 도구 및 분석

- VisualVM
  → Thread 수, Heap 메모리, CPU 사용량 확인

- JConsole
  → Thread 상태 실시간 확인

- JFR (Java Flight Recorder)
  → 고급 이벤트 추적, 성능 병목 찾기
  
  
───────────────────────────────────────────────
  
  [8] 동기 vs 비동기

블로킹  :  ServerSocket + accept()	  ver. jdk8
고성능 비동기로 이벤트 기반 구조  :Selector, SocketChannel (NIO, 여전히 사용됨, 특히 네이티브 통합 필요 시)
고성능 서버로 단순,경량 (I/O 중심):     Virtual Thread + ExecutorService 	ver. jdk21



블로킹: 연결 대기 중 스레드 정지되고 클라이언트마다 스레드 필요, 자원 낭비, 연결 수 증가에 한계가 있다.
NIO: 여러 연결을 동시에 감지하고 이벤트 발생 시 처리하므로 적은 스레드로 효율적이며 대규모 연결에 적합하다.
VirtualThread: 기존 블로킹 코드를 그대로 사용하면서도 가상 스레드로 수천 개의 연결을 효율적으로 처리할 수 있다.

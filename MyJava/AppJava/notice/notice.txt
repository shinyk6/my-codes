2025-02-26 Day2=========================================
1. 참조의 개념을 이해하고 설명할 수 있다.
2. 운영체제와 자바, JVM을 이해하고 JDK API를 활용할 수 있다.
	https://docs.oracle.com/en/java/javase/21/vm/java-virtual-machine-technology-overview.html
3. 프로젝트, 모듈, 패키지, 클래스 구현을 이해하고 설명할 수 있다.
4. JDK 와 openJDK의 차이를 이해하고 설명할 수 있다.
	

2025-02-27 Day3======================================
1. IDE를 활용해서 프로젝트 생성 및 구조를 이해할 수 있다. -> src, bin ..
2. 클래스 단위 및 메소드 구현 실행을 할 수 있다.
3. API를 이용해서 클래스의 메소드를 호출하는 실행을 숙지할 수 있다. 	


2025-02-28 Day4=================================================

1. 자료형의 개념과 종류를 이해하고 사용할 수 있다.
2. 변수의 선언과 활용 방법을 익히고 다양한 변수를 사용할 수 있다.
 -변수 선언 및 초기화 규칙 학습
 -지역변수(Local), 전역변수(Instance), 정적 변수(Static)개념 이해
 -final( 자바에선 static final상수) 키워드 활용법 숙지

2025-03-04 Day5====================================================
1. 연산자의 종류와 역할을 이해한다.
2. 연산자의 우선순위(Precedence)와 결합 방향(Associativity)를 이해하여 연산이 수행되는 순서를 예측할수있다.
3. 다양한 연산자를 조합하여 복잡한 연산식(Expression)을 구성하는 방법을 숙지하고 활용할 수 있다.
4. static return메서드를 작성하고 호출하는 방법을 학습한다.
	
2025-03-05 Day6==========================================================
1. 클래스 선언과 생성자 오버로딩의 개념을 이해하고, 다양한 매개변수를 받는 생성자를 구현할 수 있다.
2. 클래스 내부에서 여러 개의 생성자를 정의하고, 인자의 개수나 타입이 다를 때 적절한 생성자를 호출하는 방법을 학습한다.
3. 캡슐화(Encapsulation)의 개념과 필요성을 이해하고, 정보 은닉을 통해 데이터 보호 방법을 설명할 수 있다.
	-private 접근 제어자를 사용하여 클래스의 멤버 변수를 외부에서 직접 접근하지 못하도록 설정하고, 이를 통해 데이터 무결성을 유지하는 방법
4. Getter와 Setter 메소드를 활용하여 캡슐화된 필드에 안전하게 접근하고 수정할 수 있다.
5. 메소드 오버로딩(Method Overloading)의 개념을 이해하고, 다양한 매개변수를 가진 메소드를 정의 할 수 있다.
6. 메소드 오버라이딩(Method Overriding)을 활용하여 부모 클래스의 메소드를 재정의하고, 다형성을 구현할 수 있다.

2025-03-06 Day7==================================================

1.연산자의 종류와 역할을 이해하고, 자바의 제어문(비교문, 선택문, 반복문)의 기본 개념을 익힌다. _jdk21에서 안정화됨
2.연산자의 우선순위(Precedence)와 결합 방향(Associativity)를 이해하여 연산이 수행되는 순서를 예측할수있다.
	-대부분 연산자는 왼쪽에서 오른쪽(Left to Right)결합 방향을 가지지만,
	대입 연산자(= , +=, -=)와 일부 연산자(? :, new)는 오른쪽에서 왼쪽(Right to Left)결합 방향을 가진다. 
3.다양한 연산자를 조합하여 복잡한 연산식(Expression)을 구성하는 방법을 숙지하고 활용할 수 있다.
4.비교문, 선택문, 반복문 등의 제어문을 활용하여 자바 프로그램의 흐름을 제어할 수 있다.

2025-03-07 Day8=====================================================

1. if~else와 switch 문을 활용하여 조건을 평가하고 프로그램의 흐름을 제어할수있다.
2. 비교 연산(>, <, ==, !=)과 논리 연산(&&, ||, !) 을 조합하여 복잡한 조건식을 구성할 수 있다.
3. 반복문(for, while, do-while)을 이해하고 상황에 맞게 설명할 수 있다.
	-for루프를 사용하여 정해진 횟수만큼 반복되는 로직을 구현할 수 있다.
	-while루프를 이용하여 특정조건이 충족될 때까지 반복되는 코드를 작성할 수 있다.
	-do-while루프를 이용하여 코드를 최소 한 번 실행한 후, 조건을 확인하여 반복을 결정하는 구조를 말한다.
4. switch문을 활용하여 다중분기 구조를 이해하고 활용할 수 있다.
5.중첩 조건문을 활용하여 복잡한 조건을 효율적으로 처리할 수 있다.
6. 배열 

2025-03-10 Day9===============================================================
1. 자바의 배열 구조를 통해 참조형 자료들을 처리하는 것을 확인하고 활용할 수 있다. [기본 문법]

2. 일차원, 다차원, 객체 배열등을 통해 데이터를 프로세싱 할 수 있다. [java.util.Arrays]          
	 java.lang -> import하지않아도 기본 자료형들을 제공, 관리하는 class	(rapper클래스)
	Object - 최상위 부모 = 자료관리 (toString, equals, hashCode 등 ..)
	배열 객체 - java.util.Arrays  (배열을 선언함과 동시에 상속구조는 아니지만 Arrays클래스의 멤버를 내 것처럼 가능.
				정렬, 검색, 복사, 변환 등 해주는 메소드들이 존재 (모두 static->객체 생성안해도 사용가능))
3. record개념과 클래스 구현 방법을 이해하고 클래스 기능을 추가 할 수 있다. 

4. 상속의 개념과 오버라이딩, 오버로딩을 활용해서 기능 구현, 선언, 활용을 자유롭게 할 수 있다.

2025-03-11 Day10=========================================================

1. 상속(Inheritance)의 개념과 활용을 이해하고, 부모 클래스의 기능을 재사용하여 코드의 중복을 줄일 수 있다.

2. 추상클래스(Abstract Class)의 개념을 이해하고, 공통 기능을 정의하여 코드의 일관성을 유지할 수 있다.

3. 다형성(Polymorphism)을 활용하여 객체를 동적관리하고, 유연한 코드 구조를 만들 수 있다.
	:하나의 부모타입을 통해 여러 자식 객체를 참조할 수 있도록 하는 개념
	:메소드를 오버라이딩 해서 실행 시점에서 객체의 실제 타입에 따라 적절한 메소드가 실행되도록 함 [동적바인딩]

4. 인터페이스(Interface)를 사용하여 유연한 설계를 구현하고, 다중 구현[결합도를 낮춘다=의존성을 줄인다]을 활용할 수 있다.
	-필드가 public static final 자동 적용, 모든 메소드가 public abstract (jdk8 default, static메소드 지원)
	-클래스 또는 모듈간의 연결정도(의존성)를 결합도라고 함
	결합도가 높다 ->하나의 클래스가 다른클래스에 강하게 의존한다.
	결합도가 낮다->클래스 간 변경이 있어도 다른 클래스에게 영향이 적다

2025-03-12 Day11==================================================================

1. 클래스와 상속을 활용하여 코드 재사용성을 높이고, 다형성을 적용하여 유연한 프로그램 구조를 설계 할 수 있다.

2. 추상 클래스와 인터페이스의 개념과 차이를 이해하고, 각각의 용도와 특징을 설명할 수 있다.

3. 프로그램 실행 중 발생하는 예외를 try-catch-fianlly 블록을 활용하여 효과적으로 관리할 수 있다.

2025-03-13 Day12===================================================================

1. 문자열 처리와 관련된 String, StirngBuiler, StringBuffer 클래스의 특징과 차이점을 이해하고, 각 클래스의 적절한 문자열 조작을 수행할 수 있다.

2. 어노테이션(Annotation)의 목적과 기본 사용법을 이해하고, 커스텀 어노테이션을 정의하여 코드에 메타데이터를 추가하고 활용할 수 있다. 

3. 제네릭(Generic)의 개념과 사용법을 이해하고, 타입 안정성을 보장하면서 재사용 가능한 코드를 작성할 수 있으며,
	와일드카드와 타입 제한을 활용하여 유연한 제네릭 프로그래밍을 구현할 수 있다.
	-타입 제한 할 때 사용

4. 컬렉션 프레임워크의 구조와 주요 인터페이스(List, Set, Map)를 설명할 수 있다.

	-List, set, Map데이터 프로세싱 : crud
	
	
2025-03-14 Day13============================================================================

1.자바의 유틸 패키지(java.util)를 활용하여 다양한 컬렉션 프레임워크와 유틸리티 기능을 효과적으로 사용할 수 있다.

2. 람다식을 이해하고 이를 활용하여 코드의 간결성과 가독성을 높이며 함수형 프로그래밍을 구현할 수 있다.

3. 자바의 Comparator와 Comparable인터페이스를 활용하여 사용자 정의 객체의 정렬 로직을 구현할 수 있다.
	Comparator->객체 외부에서(매개인자 두개받음) 정렬기준
	Comparable->객체 내부에서(내부this와 외부에서 받은 매개인자로 비교) 정렬기준 (compareTo 오버라이딩)

4. Optional클래스를 활용하여 NullPointerException을 방지하고, 안전한 값 처리를 할 수 있다.
	Optional<T> -> null값이 발생할 가능성이 있는 상황에서 안전하게 처리하도록 메소드를 제공 

5. 익명 클래스와 람다식의 차이점을 이해하고, 상황에 맞게 적절한 방법을 선택하여 사용할 수 있다.	

2025-03-17 Day14=====================================================================


1. 스트림 API를 활용하여 데이터를 효율적으로 변환, 필터링, 집계 및 병렬 처리를 할 수 있으며, 성능을 최적화할수있다.

2. 스트림의 중간연산(Intermediate Operations)과 최종연산(Terminal Operations)의 개념을 이해하고,
	다양한 연산(map, filter, sorted, reduce, collet등)을 활용하여 데이터를 효과적으로 처리할 수 있다.

3. 여러 연산 단계를 연결한 스트림 파이프라인의 특성을 이해하고 활용할 수 있다.

4. 컬렉션이나 배열 데이터를 스트림으로 전환하여 선언적 프로그래밍으로 변환 후 프로세싱 할 수 있다.


		컬렉션(jdk5)->람다(jdk8)->스트림(데이터 통로. 데이터를 보내는 곳) 모두 이어짐

2025-03-18 Day15=========================================================================

1. Java IO를 활용하여 파일을 읽고 쓸 수 있다.

2. Java NIO (New IO)를 이용하여 버퍼(Buffer)와 채널(Channel)을 활용한 비동기 파일 입출력을 할 수 있다.

3. Java NIO.2 (Files API, Path API)를 사용하여 파일 및 디렉토리를 생성, 복사, 이동, 삭제할 수 있다.

4. Java IO, NIO, NIO.2의 차이점을 이해하고 적절한 상황에서 사용할 수 있다.

2025-03-19 Day16===============================================================================

1. Files.readAlllines(), write()를 이용해 파일 입출력 처리와 텍스트 파일 데이터 읽기/쓰기 기능을 구현한다.

2. Files.walk(), Files.list()를 활용해 디렉토리 탐색 및 파일 목록 처리 기능을 수행한다.

3. ByteBuffer, CharBuffer등 다양한 Buffer 개념과 주요 메소드를 이해하고 직접 데이터 입출력을 구현할 수 있다. (put(), get(), flip(), clear())

4. channel과 Buffer의 구조적 차이와 관계를 이해하고, NIO기반 입출력 처리 패턴을 활용할 수 있다.

5. Path와  Paths클래스 활용법을 이해하고, 파일 및 디렉토리 경로를 관리할 수 있다.




2025-02-28 (4일차)
- com.test  <<클래스 만들기, 메소드 호출해보기 >>

	메소드 선언 및 호출
		-접근 제한자 static 리턴데이터타입 userName(){}   	
		
		java.lang.Thread'sleep() //java.lang.Thread클래스의 sleep메소드
		** public static void sleep(long millis)throws InterruptedException 
		->메소드 뒤에 선언되는 throws 키워드는 프로그램이 발생되는 상황을 클래스로 생성해서 JVM이 알려주는 예외처리 위임
		
		
		-리턴데이터타입 [7가지 기본 자료형과 참조자료형 / void ]
	public static void prn() { //void : 리턴값이 없음
		System.out.println("안녕하세요");
	}

	-호출 : 클래스명.메소드
	-public static void userName(매개인자*){} //매개인자가 없을 때 void
	
	-public static datatype UserName(매개인자*){ //매개인자가 있으면 datatype지정
		return datatype_ value;
	}
	
- com.sec01 << 기본 자료형, 값 >>
	https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
 	DataType.java - boolean 타입 확인	

	***핵심 : 01_exam.png 풀 수 있어야함
	--------------------------------------








2025-03-04=================================
- com.sec02
Wrapper class : 기본 데이터 타입을 객체로 다루기 위해 제공되는 클래스 - java.lang패키지에 속함.
Boxing : 기본형 -> 래퍼 객체 변환 (Integer.valueOf(10))
Unboxing : 래퍼 객체 -> 기본형 변환 (obj.intValue())
Auto-Boxing : Integer obj = 10; (자동 변환) jdk에 자동으로 변환시키는 기능이 있음
Auto-unboxing : int num = obj; (자동 변환)	
	
	
2025-03-05=================================
- com.sec03
기본 클래스(원시 클래스) 선언, 생성, 멤버 호출 
class - userDataType   (풀캡슐화. 모든 멤버를 외부에서 철저하게 차단시킴) : 자주 사용하는 변수와 메소드를 하나의 이름으로 등록해서 필요할 때마다 생성해서 사용하는 것
	  - 선언된 멤버변수는 은닉(접근제한자 private)하고 오픈된(public) 메소드를 통해 값 전달 및 변경하고(setter) 리턴하는(getter) 구조를 가짐.
	  - 멤버 = 필드(final이 붙은 상수 등)+메소드(생성자,기능을 가짐)
		
	[선언방법]
클래스타입-> 접근제한자[abstract] class userName{
			필드+메소드
		
		 }
	
ex) 정수 두 수를 관리하는 Test클래스를 만들어보자.
class Test{
	//	int a, b; //앞에 아무것도 명시하지 않으면 default.
		private int a; //자주 사용하는 멤버 변수 은닉화
		private int b;
		
		//setter   값을 전달, 변경하겠다. -void 
		public void setA(int a){
			this.a = a; //전달 및 변경
		}
		public void setB(int b){
			this.b = b;
		}
		//getter
		public int getA(){
			return a; //this.a
		}
		public int getB(){
			return b; //this.b
		}
		
		=> 외부에서 메소드만 호출 할 수 있음.
		자바는 기본적으로 모든 멤버 변수는 private, 오픈하고 싶은 것은 상수만.
	
}
	

오버로딩 (Overloading) : 하나의 클래스 내에서 같은 이름의 메소드를 {매개변수 개수, 타입 다르게} 여러 개 정의하는 것
	목적 : 같은 기능을 다양한 입력값에 사용
오버라이딩 (OverRiding) : 상속 시 부모 클래스의 메소드를 자식 클래스에서 {메서드명, 매개변수, 반환 타입을 동일} 재정의하는 것
	목적 : 부모 클래스의 동작을 자식 클래스에서 변경해서 기능에 사용
	
	
생성자 (Constructor)
	-클래스 이름과 동일하되 반환형은 없음
	-오버로드 할 수 있음
	-생성자는 객체를 생성할 때 단 한번만 호출됨 new className(); -> 생성자 호출
	-메소드처럼 명시호출 할 수 없음	->객체.멤버 호출불가능
	-생성자는 상속 되지 않으며 객체를 생성할 때 단 한번 호출됨
	-생성자를 명시하징 않으면 기본 생성자가 호출되고 명시하면 명시된 생성자가 호출됨
	-생성자는 멤버변수 초기화를 목적으로 함           
	
2025-03-05=============================================
 -com.sec02 연산자
 -BitOperator.java
  진리지표확인, 각 래퍼클래스의 변환메소드 확인, String.format(), 비트 자리수 표현, 정수/실수 각각 리턴변환 메소드 API확인
  Nan 처리하는 메소드 확인 -> 변환값 확인

2025-03-11=============================================
 -com.sec07.myTest
 -단일 상속
 -getRes() 재정의 개념
 -상속관계 기본 생성자,  오버로드 생성자 추가
 -객체와 주소간의 영역 제한 
 -동적 바인딩 -> 캐스팅 
 -API를 확인 후 [상속구조, 필드, 메소드, 생성자 등] 상속을 받자.
 
 -com.sec07.mytest01
 	has-a 관계도를 확인 했다.		: 클래스가 다른 클래스의 객체를 포함한다. 
 		class my제어판{
 			private java.io.File  myfile:
 		}
 		
 	
 	is-a : 클래스가 다른 클래스를 상속 받는다.
 		class my extends File{}
 		
 
 2025-03-12=================================================
 다이어그램 설치
 		
 https://download.eclipse.org/modeling/mdt/papyrus/updates/releases/2024-06
 
 -com.sec08
 -com.sec09
  예외처리 : 어떤 경우에 의해 실행 시 발생하는 프로그램이 강제종료하지 않도록 처리하는 것
  1) try~catch : 예외를 직접 처리하는 구문 (여러개의 catch - 경우의 수)
  2) finally : 예외발생 유무와 관계 없이 실행됨 (선택적으로 사용)	->예외가 나도, 나지않아도 무조건 실행되는 코드를 finally에 작성 / close() : 파일닫기, 리소스닫기, 로그아웃, 파일 백업(갑자기 컴퓨터가 꺼졌을 경우)
  3) throws : 메소드 뒤에 선언되며 호출하는 곳으로 예외처리 위임 
  4) throw : 예외 클래스를 명시 실행
  5) try - with - resource(jdk 7+) : finally없이 자동 리소스 해제
 
 ==========================================================================
 case 1 :
 		try {
 			예외가 발생될 코드
 		}catch(Exception e){}	//Exception은 클래스명
 		
 case 2 :
 		try {

			}catch(ArithmeticException name){ //자손이 예외를 못잡으면

			}catch(RuntimeException name){ //조상

			}catch(Exception name){    } //더 조상
	=>경우에 따라 예외처리하는 내용이 다름
 	
 case 3 :
 		try{
 		
 		}finally{}
 case 4 :
 	
  		try {

			}catch(ArithmeticException name){

			}catch(RuntimeException name){ 

			}catch(Exception name){    
			
			}finally{
			 		try{
 					}finally{}			//중첩 사용 가능
			}

 case 5 : try - with - resources : 자동으로 close() 호출하면서 참조한 리소스 소멸 (밑 2개의 인터페이스 사용)
 		java.lang.AutoCloseable       ->둘의 자식들이 밑의 구문을 사용 가능
 		java.io.Closeable
 
	    try (FileReader fr = new FileReader(path)) {
	        return br.readLine();
	    }
	
	=================================================
	FileReader fr = null;
	try {
		 fr = new FileReader(path)			->위의 방법과 같은 의미
		}catch(Exception name){
		
		}finally{
			fr.close();
		}
 		
 ====2025-03-13 com.sec10===================================================
 
 com.sec10.mstring 

  -String은 불변(Immutable)객체이므로 연결 연산(+)이 많을수록 성능이 떨어짐
  -StringBuffer와 StringBuilder는 가변(Mutable) 객체로, 문자열 변경이 많을 때 성능이 더 좋음
  -StringBuffer는 멀티쓰레드 환경에서 안전하지만, StringBuilder 보다 느림
  -StringBuilder는 싱글쓰레드 환경에서 가장 빠른 성능을 제공
 
 com.sec10.myreflect
 	자바파일 화살표▽ 펼치면 정보가 나오는 것
 1. import.java.lang.reflect : 실행 중에 클래스, 메소드, 필드, 생성자등의 정보를 동적으로 조회하고 조작할 수 있는 기능을 제공하는 API
 
 - 클래스, 메소드, 필드, 생성자등의 정보 동적으로 조회 	java Test
 - 접근제한자 상관없이 private 필드 메소드 접근 가능
 - 프레임워크(Spring, SpringBoot, ORM)에서 객체를 동적으로 생성함
 - @(어노테이션)과 함께 사용하며 런타임 조직이 확장 가능
 - 런타임 중에 특정 메소드 실행 -> invoke() 
 
 2. 어노테이션(Annotation)의 목적과 기본 사용법을 이해하고, 커스텀 어노테이션을 정의하여 코드에 메타데이터를 추가하고 활용할 수 있음
 	- 컴파일 시에 정보 제공 -> 문법 또는 오류 체크
 	- 빌드 배포시에 사용 -> 코드 자동 생성
 	- 런타임 동작 제어 -> 프로그램 실행 시 특정 기능을 수행하도록 할 때
 	*자동화 코드 생성, 테스트, 디버깅등 
 
 
 3. 제네릭스(Generics)는 컴파일 시 타입을 체크하고, 다양한 데이터 타입을 처리할 수 있도록 도와주는 기능
	-제네릭 클래스(Generic Class) : 특정 타입을 지정하지 않고, 여러 타입의 데이터를 저장할 수 있는 클래스
		T를 사용해 다양한 타입을 받을 수 있다 
		class Test<T> {}
	
	-제네릭 메서드(Generic Method) : 특정 메서드에서만 제네릭 타입을 적용하는 방법
                 public static <T> void print(T item){
                          System.out.println(item);
                 }
   
   	-와일드카드(Generics Wildcard) : 유연한  타입을 허용 (상속관계에 타입을 제한)
           List<? extends T> - T와 T의 하위 클래스만 허용 (상한 제한)
           List<? super T> - T와 T의 상위 클래스만 허용 (하한 제한)
  

=====2025-03-14 com.sec12==========================================
1) 람다식의 주요특징 
1. 익명 함수(Anonymous Function) 이름 없이 사용되는 함수로 함수형 인터페이스의 변수에 할당 가능.
2. 함수형 인터페이스 : 하나의 추상 메소드만을 가지는 인터페이를 말한다. -> @FunctionalInterface
3. 람다식은 단 하나의 추상 메소드만을 가지는 함수형 인터페이스에서만 사용 가능하다.(default,static 메소드는 여러 개 가질 수 있다.)
4. 간결한 코드 구조로 기존의 익명 클래스를 람다식을 사용하여 간단하게 표현할 수 있다.
5. 자바 컴파일러가 문맥을 보고 타입을 자동으로 추론한다.
6 .java.util.function 패키지에는 다양한 기본 함수형 인터페이스
(Function : 입력값을 받아서 가공한 후 다른 타입으로 변환하여 반환하는 인터페이스 R apply(T t), 
 Predicate: 입력값을 받아서 조건을 체크한 후 true 또는 false를 반환하는 인터페이스 boolean test(T t),
  Consumer :  입력값을 받아서 특정 작업을 수행하고 반환값이 없는 인터페이스 void accept(T t),
  Supplier : 입력값 없이 값을 생성하여 반환하는 인터페이스  T get())가 제공된다. 

[람다 표현식 ]
lambda 표현식은 익명으로 처리되어 이름이 없다.
lambda 표현식은 compiler 가 context 에 맞는 타입을 유추하기 때문에 return type이없다.
lambda 표현식은 compiler 가 context 에서 유추되어 throws clause 가 없다.)
lambda 표현식은 람다 표현식은 Generic 이 될 수 없어 type 파라미터를 선언할 수없다.

[형식] 
(int x, int y) -> { return x + y; }   // 기존 방식
(x, y) -> x + y   // 타입 생략 가능

case1 :  매개변수가 없는 경우
() -> System.out.println("Hello World!");

case2:  매개변수가 하나인 경우
x -> x * x;

case 3: 매개변수가 여러 개인 경우
(x, y) -> x + y;

case4  실행문이 여러 개일 경우
(x, y) -> {
    int sum = x + y;
    return sum;

  [다양한 형식]
  형식에 정의된 구문은 매개인자에 따라 괄호 () , 중괄호{}가 생략가능하다. 
 >> 매개인자로 su 을 받아 출력 하는 구문
    (int su) -> { System.out.println(su); }
 >>  자료형이 생략 가능하다.
 (su) -> { System.out.println(su); }
>>  매개인자 하나일경우 (), {}생략 가능하다
 su -> System.out.println(su);

>> 매개인자 없는 경우 빈 괄호()만 사용하여 명령 실행할 수 있다.
 ()->{ System.out.println('a')}

>> 매개인자 두 개 이상 이면 자료형 생략 하여 실행한다.
(a, b) -> { return a + b; }


>>매개인자 두 개이상이면 {}와 return 키워드를 생략해서 사용한다
(a, b) -> a + b;
		
 		
===============2025-03-17============================
Stream API  데이터 집합을 효과적으로 처리할 수 있는 API로 필터링, 그룹핑등 가능하다. (데이터 처리를 쉽게 하겠다.)

1) Stream 연산순서 
     (1)생성 :Collection.stream() : 요소를 기준으로 스트림 생성,  
        Stream.of() : 값을 기준으로 스트림 생성, 
       	Arrays.stream() : 배열(list) 객체 기준으로 스트림 생성 
				->collection 객체들은 모두 stream 메소드를 가지고 있음
     (2)중간 연산 (Intermediate Operation):
        filter(), map(), sorted(), distinct(), limit(), flatMap() 등
        중간 연산은 스트림을 변환하는 작업을 수행하며, 최종 연산이 호출될 때 실행된다
     (3)최종 연산 (Terminal Operation)
       forEach(), collect(), reduce(), count(), sum(), min(), max() 등
        최종 연산이 수행되면 스트림이 소비되며, 이후에는 다시 사용할 수 없다

2)Stream 주요 연산
 map()    : 요소 변환    -> Stream<R> map(Function<T, R> mapper)    R apply(T t)
 			mapToObj()
 			형변환 map(String :: valueOf), 문자열 소대문자 변환(String::toUpperCase), 객체에서 String   →  하나 받아서 리턴할 수 있음
filter()     :조건에 맞는 요소만 선택
sorted()     : 정렬 수행
reduce()     : 누적 연산 수행  BiFunction<T,U,R>
collect()	 : 리스트, 맵 등으로 변환
peek()	     :변환 작업을 할 때 테스트용으로 사용

3.병렬 처리parallelStream()을 활용하면 데이터 병렬 처리가 가능하다 		
 		
 		
 ==========Day 15 2025-03-18======================

1. Java IO를 활용하여 파일을 읽고 쓸 수 있다. _동기화 _소량의 데이터를 단일 처리_단방향 스트림, java.io
	-File_정보용

2. Java NIO (New IO)를 이용하여 버퍼(Buffer)와 채널(Channel)을 활용한 { 비동기 } 파일 입출력을 할 수 있다. _대량의 데이터 다중처리_양방향(채널)_버퍼(입출력), java.nio

3. Java NIO.2 (Files API, Path API)를 사용하여 파일 및 디렉토리를 생성, 복사, 이동, 삭제할 수 있다.
	-Files_디렉토리, 파일 관리(CRUD)
4. Java IO, NIO, NIO.2의 차이점을 이해하고 적절한 상황에서 사용할 수 있다.		


com.sec13.myio
https://docs.oracle.com/javase/tutorial/essential/io/index.html

-java.io (기본 I/O)
	스트림 기반: 데이터를 순차적인 스트림으로 처리.
	블로킹 I/O: 읽기/쓰기 작업이 완료될 때까지 스레드가 대기합.
	파일, 네트워크, 메모리 등 다양한 입출력 지원: 기본적인 파일 입출력, 네트워크 통신, 메모리 스트림 등을 처리.
	단순하고 사용하기 쉬움: 기본적인 입출력 작업을 처리하는 데 적합.

모든 클래스가 read/write를 가지고 있음

파일 입출력 단위 : 
byte _{이미지, 영상},         char{한글자,char[], String},     Object{class}
int read(byte[]) :byte단위	read(char) 					   readObject()
							read(char[]) readLine()		   writeObject(Object)
	write(byte)				write(char)
							writeLine(String)


->가장 선조 : inputStream / outputStream


h_MyObject02.java 직렬화
	- static : 직렬화 대상이 아님 -> 직렬화와 무관, 읽기 시점의 static값 출력
	- transient : 일시적 데이터로 직렬화 제외 -> 읽기 후 null로 출력
	- serialVersionIID : 직렬화 버전 관리 -> 클래스 구조 변경 시 사용 권장
	- @SuppressWarning("serial")

======================================================================

-java.nio (New I/O)
	버퍼 기반: 데이터를 버퍼에 저장하고 처리한다.
	논블로킹 I/O: 읽기/쓰기 작업이 완료되지 않아도 스레드가 다른 작업을 수행한다. =비동기화 병렬작업
	채널과 셀렉터: 채널을 통해 입출력을 수행하고, 셀렉터를 사용하여 여러 채널을 효율적으로 관리
	고성능 I/O: 대규모 네트워크 애플리케이션 등 고성능 I/O가 필요한 경우에 적합하다. 

-java.nio.file (NIO.2)
	파일 시스템 API: 파일 및 디렉터리 작업을 위한 강력하고 유연한 API를 제공한다
	Path 인터페이스: 파일 경로를 추상화하여 플랫폼 독립적인 코드를 작성할 수 있도록 한다. 
	Files 클래스: 파일 복사, 이동, 삭제, 속성 관리 등 다양한 파일 시스템 작업을 지원한다.
	파일 시스템 작업에 특화: 파일 시스템 관련 작업을 보다 쉽고 효율적으로 처리한다.

======================================================================

	DB, JDBC(자바랑 DB) <-> [도커]	<<스레드 -> 네트워크 + 프론트(리액트)>>, {디자인패턴, 스프링}, 스프링부트 데브옵스
	

=============================================Day16 3월 19일================================================

1. Files.readAlllines(), write()를 이용해 파일 입출력 처리와 텍스트 파일 데이터 읽기/쓰기 기능을 구현한다.
	-byte단위 : Files.newOutputStream()	Files.newInputStream()
	-문자열 단위 : write()	, Files.readAllLines()	- List<String> 타입으로 관리
	-객체 단위 : ObjecteOutputStream() + Files.newOutputStream()으로 ObjectInputStream() + Files.newInputStream()
	

2. Files.walk(), Files.list()를 활용해 디렉토리 탐색 및 파일 목록 처리 기능을 수행한다.
static Stream<Path> walk(Path start, FileVisitOption... options) -> start패스를 시작으로 하위의 디렉토리 탐색 결과를 Stream<Path>로 리턴
static Stream<Path>	walk(Path start, int maxDepth, FileVisitOption... options)

static Path	walkFileTree(Path start, FileVisitor<? super Path> visitor) -> start패스를 시작으로 디렉토리 탐색중에 발생되는 이벤트를 FileVisitor처리 후 start패스로 리턴
static Path	walkFileTree(Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor)

==> 1) 위 오버로드 메소드를 통해 디렉토리 순회결과 및 이벤트 확인 (FileVisitor)
	2) FileVisitor 인터페이스를 이용한 커스텀FileVisitor를 생성하는 방법
	3) FileVisitor인터페이스를 상속받는 SimpleFileVisitor라는 클래스를 사용한 커스텀 이벤트 선택적으로 생성하는 방법
	4) SimpleFileVisitor 이벤트(file탐색, 디렉토리탐색)의 매개인자를 봤더니 BasicFileAttributes
		BasicFileAttributes파일의 기본 속성값 활용하는 방법

3. ByteBuffer, CharBuffer등 다양한 Buffer 개념과 주요 메소드를 이해하고 직접 데이터 입출력을 구현할 수 있다. (put(), get(), flip(), clear())
	allocate() : 초기 메모리 할당
	put() : 데이터 저장
	get() : 데이터 리턴
	flip() : 읽기전환(position 0, limit는 마지막 데이터로 설정)
	clear() : 버퍼 재사용 준비 (position 0, limit는 초기화)
	
4. channel과 Buffer의 구조적 차이와 관계를 이해하고, NIO기반 입출력 처리 패턴을 활용할 수 있다.
	

5. Path와  Paths클래스 활용법을 이해하고, 파일 및 디렉토리 경로를 관리할 수 있다.	
	
	
com.sec13.myNio
 
 b_FileCRUD.java
- **BasicFileAttributes : 기본적인 파일 속성에 접근 (모든 파일 시스템 공통) ->size(), creationTime(), lastAccessTime(), lastModifiedTime(), isDirectory(), isRegularFile(), isSymbolicLink(), isOther()
- DosFileAttributes : Windows DOS 파일 시스템 속성에 접근 ->isReadOnly(), isHidden(), isArchive(), isSystem()
- PosixFileAttributes : POSIX 호환 파일 시스템(Linux, macOS 등) 속성에 접근 -> owner(), group(), permissions()
- AclFileAttributes : 액세스 제어 목록(ACL) 속성에 접근 -> getEntries()
- UserDefinedFileAttributes(Files객체사용추천) : 사용자 정의 파일 속성에 접근 -> list(), read(String name, ByteBuffer dst), write(String name, ByteBuffer src)
- FileOwnerAttributeView : 파일 소유자 속성에 접근 및 수정 -> getOwner(), setOwner(UserPrincipal owner)
- PosixFileAttributeViewPOSIX : 파일 속성에 접근 및 수정 -> setPermissions(Set<PosixFilePermission> perms)
- AclFileAttributeView: ACL 속성에 접근 및 수정 -> setAcl(List<AclEntry> aclList)
- UserDefinedFileAttributeView : 사용자 정의 파일 속성에 접근 및 수정 ->delete(String name)
- FileStoreAttributeView: 파일 저장소 속성에 접근 -> getTotalSpace(), getUsableSpace(), getUnallocatedSpace()
	

기본자료형 -> 데이터타입 -> 연산자 -> 제어문 -> 배열 -> 다차원 배열, 오브젝트 배열 -> 클래스 -> 상속 -> 다형성
예외처리 -> i/o -> 컬렉션 -> {스레드 -> 네트워크}


================================Day28 04월 07일=====================================
com.sec14
	1. 쿼리 CRUD를 활용한 코드 구현
	2. jdbc 인터페이스 흐름 확인
	3. 매개인자 데이터 대입 확인
================================Day29 04월 08일=====================================
common.JDBCTemplate : JDBCTemplate 클래스는 DB 연결 생성,
					  자원 해제(Connection, Statement, ResultSet),
					  트랜잭션 처리(commit, rollback)를 일관되게 수행하는 유틸리티 클래스

com.sec15 :
	1. JDBCTemplate 구현 호출
	2. static import 호출
	3. 프로시저 호출 IN, OUT, INOUT
	4. SQLTYPE 속성 타입 매핑	
	
===================================================================================
MVC 패턴 활용한 서비스 컴포넌트를 콘솔에서 실행

✔view → controller → model(service → dao) → JdbcTemplate → db
✔코드를 작성할 때는 거꾸로 db부터 작성


create table if not exists person(		// entity 설계를 가장 먼저 해야함
	name varchar(50) primary key,
    address varchar(100),
    phone varchar(20)
);


MyPersonApp/src
			   /com.person.controller.PersonController ---[7] 
			    com.person.dao.PersonDao(I) ---[4]
			    			   PersonImpl(C)
			    com.person.model.Person ---[3]
			    com.person.service.PersonService (I) ---[5]
			    				   PersonServiceImpl (C)
			    com.person.view.PersonView ---[6] 전체 출력 코드 -> 알림코드 (select 출력, insert됐어, udpate됐어 등)
				common.JDBCTemplet --- [2]
				db.properties ---[1]
		  /lib
		  	   /mysql-connector-j-9.1.0.jar
	
	
	
MyPersonApp
├── lib
│   └── mysql-connector-j-9.1.0.jar
└── src
    └── com
        └── person
            ├── controller
            │   └── PersonController.java  -- [7]
            ├── dao
            │   ├── PersonDao.java (I)     -- [4]
            │   └── PersonDaoImpl.java (C)
            ├── model
            │   └── Person.java          -- [3]
            ├── service
            │   ├── PersonService.java (I) -- [5]
            │   └── PersonServiceImpl.java (C)
            ├── view
            │   └── PersonConsolView.java  -- [6] 전체 출력 코드 / 알림코드
            └── common
                └── JDBCTemplate.java      -- [2]
    └── db.properties                  -- [1]	
	


==============================================================
com.sec17.tcpexam		-> 1:1 통신		serverSocket.accept()로 단일연결 처리
com.sec17.tcpexam02		-> 1:N , 가상스레드 접목 | 통신 -> 여러명의 클라이언트 접속 시 동시처리
						Thread.startVirtualThread(()-> handleClient(client_socket) );

com.sec17.tcpexam03     -> 1:N, 클라이언트 IP, 포트 출력, 접속 시간 기록, 클라이언트 고유 ID 출력 등 추가 해보자.

com.sec17.exam.	
			   ProtocolServer : 가상 스레드 기반의 응답 서버
			   ProtocolClient : 사용자가 메세지를 입력하면 서버에 전송하고 응답을 받는 구조
			   Protocol	: 요청의 의미를 구분하기 위한 명령 코드 정의 상수 
			

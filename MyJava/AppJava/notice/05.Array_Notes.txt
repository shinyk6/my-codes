 제5장 배열 (Array)

 5.1 일차원 배열

 [1] 배열(Arrays) 개념
- 동일한 자료형의 데이터를 하나의 이름으로 관리하는 데이터 객체(data object)이다.
- 배열은 같은 종류의 데이터를 여러 개 선언하는 대신 하나의 변수로 나열형 상수를 인덱스(나열한 방마다 주소가 있음 0번지부터 시작 [0],[1])를 통해 관리한다.
- 기본 데이터형과 참조형 객체 배열(객체, String)을 포함하여 모든 자료형에서 사용 가능하다.
- 배열은 선언과 동시에 주소를 할당받아 요소로 관리되며 연속된 메모리 공간을 차지한다.

 [2] 배열의 선언과 생성
- 배열은 참조 변수 선언 → 배열 생성 → 초기화의 단계를 거쳐 사용한다.
- 선언 방식:
  int[] ar;		//인덱스
  int ar[];
  var arVar = new int[]{10, 20, 30}; // Java 10 이상

- 배열 생성 (new 연산자 사용):
  ar = new int[5];

- 배열 선언 및 초기화:
  int[] ar = {10, 20, 30, 40, 50};
  
  =======배열 선언의 다양한 패턴============
  //1차원
  int [] ar = {10,20,30,40,50}; //나열형 상수로 배열의 메모리 확보후 시작 주소 리턴
  int [] ar = new int[]{10,20,30,40,50}; //나열형 상수로 배열의 동적할당 후 시작 주소 리턴 = 나열된 값으로 초기화     int[] ar = 배열의 주소를 받는 int형 방이라는 뜻(ar이 배열참조)
  int [] ar = new int[10];  //10개의 정수를 동적할당 배열로 메모리 생성한 후 시작주소 리턴 = 기본값으로 초기화 (방만들어 0으로 채움)
  
  //다차원 (행과 열로 놓겠다.)
  int ar[][] = {{10,20,30},		->2줄에 3칸
  				{40,50,60}}; //나열형 상수로 배열의 메모리 확보후 시작 주소 리턴			ar[0] = {10,20,30} , ar[1] = {40,50,60} //행부터 읽음
  
  int []ar[] = new int[2][]{{10,20,30},		->줄은 명시해야함
  							{40,50,60,70}}; //나열형 상수로 배열의 동적할당 후 시작 주소 리턴 = 나열된 값으로 초기화          30->ar[0][2] 50->[1][1] 70->ar[1][3]
  int [][]ar = new int[2][3];  // 2*3 정수를 동적할당 배열로 메모리 생성한 후 시작주소 리턴= 기본값으로 초기화
  
  ============================<<3월 10일 월요일>>============
 --객체 배열
 [3] 배열 관련 주요 메서드
- 배열 복사를 위한 System.arraycopy 활용:
  System.arraycopy(source, srcIndex, destination, destIndex, length);

- 배열 전체 복사 및 초기화:
  int[] copy = Arrays.copyOf(ar, ar.length);
  Arrays.fill(ar, 0); // 모든 요소를 0으로 초기화

- 배열 비교 및 정렬:
  boolean isEqual = Arrays.equals(ar, copy);
  Arrays.sort(ar);
==========================================
위에 것들을 약식으로 만든 것 데이터 프로세싱을 더 빠르게 하기 위해
- 배열을 List로 변환: 일괄 처리를 컬렉션의 객체를 통해 빠르게 처리하기 위함
  List<Integer> list = List.of(1, 2, 3, 4, 5);
  Integer[] array = list.toArray(new Integer[0]);

- Stream API[연산자, 제어문 -> 메소드]  활용한 배열 변환:  
  int[] numbers = {1, 2, 3, 4, 5};
  int sum = Arrays.stream(numbers).sum();

 5.2 다차원 배열

 [1] 다차원 배열 개념 및 선언
- 2차원 배열 선언 방식:
  int[][] arr = new int[2][3];
  int[][] arr = {{10, 20, 30}, {40, 50, 60}};

- 행렬의 전치(transpose matrix) 구현 예제:
  int[][] TA = new int[arr[0].length][arr.length];
  for (int i = 0; i < arr.length; i++) {
      for (int j = 0; j < arr[i].length; j++) {
          TA[j][i] = arr[i][j];
      }
  }

 5.3 가변 배열 (Jagged Array)

 [1] 가변 배열 개념 및 선언
- 요소의 크기가 서로 다른 배열을 저장할 수 있음.
  int[][] jaggedArray = new int[3][];
  jaggedArray[0] = new int[2];
  jaggedArray[1] = new int[3];
  jaggedArray[2] = new int[1];

 5.4 최신 JDK 21 배열 기능

 [1] record와 배열 활용
- JDK 14 이상에서 지원하는 record를 배열과 함께 활용 가능
  record Person(String name, int age) {}
  Person[] people = { new Person("Alice", 30), new Person("Bob", 25) };

 [2] Pattern Matching for switch (JDK 21 미리보기 기능)
- 객체가 특정 배열 타입인지 검사 가능
  Object obj = new int[]{1, 2, 3};
  
  switch (obj) {
      case int[] arr -> System.out.println("This is an int array: " + Arrays.toString(arr));
      default -> System.out.println("Unknown type");
  }

  정리
1. 배열은 동일한 자료형 데이터를 관리하는 객체이며, 인덱스를 이용하여 요소를 참조한다.
2. 배열의 차원에 따라 [], [][] 등의 형태로 선언된다.
3. 다차원 배열은 행과 열 구조로 이루어지며, 가변 배열을 사용하면 크기가 다른 배열을 저장할 수 있다.
4. System.arraycopy()를 활용하면 배열을 복사할 수 있다.
5. Arrays.sort(), Arrays.copyOf(), Arrays.fill(), Arrays.equals() 등 주요 메서드를 활용하면 배열을 효율적으로 관리할 수 있다.
6. List.of(), Stream API, record와 Pattern Matching for switch 등의 최신 JDK 21 기능을 활용하여 배열을 더욱 효율적으로 사용할 수 있다.
7. 자바에서 제공하는 foreach 문을 활용하면 배열의 요소를 쉽게 순회할 수 있다.
